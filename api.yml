Transform: AWS::Serverless-2016-10-31
Description: >
  Sagemaker Notebook VendingMachine Template
Parameters:
  Environment:
    Type: String
  ImageName:
    Type: String   
Resources:
###
# API
### 
  apiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  smnbstackcreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt smnbstackcreateLambdaRole.Arn
      Timeout: 120
      PackageType: Image  
      ImageUri: ${AWS::Account}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}:latest  
      ImageConfig:
        Command: 
          - create.handler
        EntryPoint: 
          - /lambda-entrypoint.sh
        WorkingDirectory: /var/task
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /smnbstackcreate
            Method: POST
            RestApiId:
              Ref: apiGateway

  smnbstackinfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt smnbstackinfoLambdaRole.Arn
      Timeout: 120
      PackageType: Image
      ImageUri: ${AWS::Account}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}:latest
      ImageConfig:
        Command: 
          - info.handler
        EntryPoint: 
          - /lambda-entrypoint.sh
        WorkingDirectory: /var/task
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /smnbstackinfo
            Method: POST
            RestApiId:
              Ref: apiGateway

  smnbstackcleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt smnbstackcleanupLambdaRole.Arn
      Timeout: 120
      PackageType: Image
      ImageUri: ${AWS::Account}.dkr.ecr.${AWS::Region}.amazonaws.com/{ImageName}:latest
      ImageConfig:
        Command: 
          - cleanup.function
        EntryPoint: 
          - /lambda-entrypoint.sh
        WorkingDirectory: /var/task
      Environment:
        Variables:
          PROVISIONED_PRODUCT_MAX_TTL_SEC: 86400
      Events:
        CheckProductScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)

###
# Roles 
###

  smnbstackcreateLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: logs_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"
        - PolicyName: cf_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - "cloudformation:CreateStack"
                - "cloudformation:UpdateStack"
                - "cloudformation:Describe*"
              Resource: "*"
      Path: "/"

  smnbstackinfoLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: logs_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"
        - PolicyName: cf_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - "cloudformation:Describe*"
              Resource: "*"
      Path: "/"

  smnbstackcleanupLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: logs_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"
        - PolicyName: cf_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - "cloudformation:Describe*"
              Resource: "*"
      Path: "/"

Outputs:
  InvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod
  smnbstackcreateFunction:
    Value: !Sub smnbstackcreateFunction
  smnbstackinfoFunction:
    Value: !Sub smnbstackinfoFunction
  smnbstackcleanupFunction:
    Value: !Sub smnbstackcleanupFunction
  

  
